name: Build and Test

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  workflow_dispatch:
    inputs:
      manual:
        description: Manual run (bypass default conditions)
        type: boolean
        required: true
        default: true

jobs:
  build:
    strategy:
      matrix:
        job_name: ['linux_amd64', 'linux_arm64', 'windows']

        include:
          - job_name: linux_amd64
            os: ubuntu-latest
            go: '1.21'
            goarch: amd64
            gotags: cmount
            build_flags: '-include "^linux/"'

          - job_name: linux_arm64
            os: self-hosted
            go: '1.21'
            goarch: 'arm64'
            gotags: 'cmount'
            build_flags: '-include "^linux/"'

          - job_name: windows
            os: windows-latest
            go: '1.21'
            goarch: ''
            gotags: cmount
            build_flags: '-include "^windows/"'
            build_args: '-buildmode exe'

    runs-on: ${{ matrix.os }}

    steps:

      - name: Configure Git
        run: |
          git config --global user.email "hackmonker127001@protonmail.com"
          git config --global user.name "hackmonker"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'

      - name: Set environment variables
        shell: bash
        run: |
            echo "GOTAGS=${{ matrix.gotags }}" >> $GITHUB_ENV
            echo "BUILD_FLAGS=${{ matrix.build_flags }}" >> $GITHUB_ENV
            echo "BUILD_ARGS=${{ matrix.build_args }}" >> $GITHUB_ENV
            echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV
            echo "CGO_ENABLED=${{ matrix.cgo }}" >> $GITHUB_ENV

            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            export EXTENSION=".exe"
            else
            export EXTENSION=""
            fi

      - name: Install Libraries on Linux
        shell: bash
        run: |
            sudo modprobe fuse
            sudo chmod 666 /dev/fuse
            sudo chown root:$USER /etc/fuse.conf
            sudo apt-get -y install fuse3 libfuse-dev rpm pkg-config
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'self-hosted'

      - name: Install Libraries on Windows
        shell: powershell
        run: |
            $ProgressPreference = 'SilentlyContinue'
            choco install -y winfsp zip
            echo "CPATH=C:\Program Files\WinFsp\inc\fuse;C:\Program Files (x86)\WinFsp\inc\fuse" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            if ($env:GOARCH -eq "386") {
                choco install -y mingw --forcex86 --force
                echo "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw32\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            }
            # Copy mingw32-make.exe to make.exe so the same command line
            # can be used on Windows as on macOS and Linux
            $path = (get-command mingw32-make.exe).Path
            Copy-Item -Path $path -Destination (Join-Path (Split-Path -Path $path) 'make.exe')
        if: matrix.os == 'windows-latest'

      - name: Build rclone
        shell: bash
        run: |
            make
  
      - name: Rclone version
        shell: bash
        run: |
            rclone version
        
      - name: Built binaries
        shell: bash
        run: |
            if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "self-hosted" ]]; then mkdir -p ${{ runner.workspace }}/bin ; fi
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then mkdir -p D:/a/teleclone/bin ; fi
            if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "self-hosted" ]]; then make release_dep_linux ; fi
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then make release_dep_windows ; fi
            if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then cp ~/go/bin/rclone${{ env.EXTENSION }} ${{ runner.workspace }}/bin/rclone_${{ matrix.goarch }}${{ env.EXTENSION }} ; fi
            if [[ "${{ matrix.os }}" == "self-hosted" ]]; then cp ~/go/bin/rclone${{ env.EXTENSION }} ${{ runner.workspace }}/bin/rclone_arm64${{ env.EXTENSION }} ; fi
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then cp ~/go/bin/rclone.exe D:/a/teleclone/bin/rclone.exe ; fi

      - name: Upload Artifacts - Linux
        uses: actions/upload-artifact@v2
        with:
          name: rclone-binaries-${{ matrix.os }}
          path: ${{ runner.workspace }}/bin
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'self-hosted'
        
      - name: Upload Artifacts - Windows
        uses: actions/upload-artifact@v2
        with:
          name: rclone-binaries-${{ matrix.os }}
          path: D:/a/teleclone/bin
        if: matrix.os == 'windows-latest'        

      - name: Create and Push Tag
        run: |
          NEW_TAG="v6.0-${{ matrix.os }}"
          if [ -z "$(git tag -l "$NEW_TAG")" ]; then
            git tag -a "$NEW_TAG" -m "Release version 6.0 for ${{ matrix.os }}"
            git push origin "$NEW_TAG"
            echo "Created and pushed tag $NEW_TAG"
          else
            echo "Tag $NEW_TAG already exists. Skipping tag creation."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}   

  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, self-hosted]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: rclone-binaries-${{ matrix.os }}
          path: bin

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/*
          name: Release for ${{ matrix.os }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Publish Release
        run: |
          echo "Release ID: ${{ steps.create_release.outputs.id }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}