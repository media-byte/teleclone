name: Build and Test

on:
  workflow_dispatch:
    inputs:
      manual:
        description: Manual run (bypass default conditions)
        type: boolean
        required: true
        default: true

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-latest-arm64, windows-latest]
        goarch: [amd64]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'

      - name: Set environment variables
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            export GOOS=windows
            export EXTENSION=".exe"
          else
            export GOOS=linux
            if [[ "${{ matrix.os }}" == "ubuntu-latest-arm64" ]]; then
              export GOARCH=arm64
            else
              export GOARCH="${{ matrix.goarch }}"
            fi
            export EXTENSION=""
          fi

          echo "GOTAGS=${{ matrix.gotags }}" >> $GITHUB_ENV
          echo "BUILD_FLAGS=${{ matrix.build_flags }}" >> $GITHUB_ENV
          echo "BUILD_ARGS=${{ matrix.build_args }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV
          echo "CGO_ENABLED=${{ matrix.cgo }}" >> $GITHUB_ENV

      - name: Install Libraries on Linux
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "ubuntu-latest-arm64" ]]; then
            sudo modprobe fuse
            sudo chmod 666 /dev/fuse
            sudo chown root:$USER /etc/fuse.conf
            sudo apt-get install fuse3 libfuse-dev rpm pkg-config
          fi

      - name: Build rclone
        run: |
          mkdir -p ${{ runner.workspace }}/bin
          make rclone
          ls ${{ runner.workspace }}
          echo "---------"
          ls ${{ runner.workspace }}/bin
          echo "---------"
          ls ${{ runner.workspace }}/go
          echo "---------"
          ls ${{ runner.workspace }}/go/bin
        #   cp ${{ runner.workspace }}/rclone${{ env.EXTENSION }} ${{ runner.workspace }}/bin/
        env:
          GO111MODULE: on

#       - name: Show rclone
#         run: |
#           ls ${{ runner.workspace }}
#           ls ${{ runner.workspace }}/bin
#           ${{ runner.workspace }}/bin/rclone${{ env.EXTENSION }} --version

#       - name: Upload Artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: rclone-binaries-${{ matrix.os }}
#           path: ${{ runner.workspace }}/bin

#   release:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Set up Go
#         uses: actions/setup-go@v2
#         with:
#           go-version: '1.21'

#       - name: Download Artifacts
#         uses: actions/download-artifact@v2
#         with:
#           name: rclone-binaries-${{ matrix.os }}
#           path: bin

    #   - name: Create GitHub Release
    #     id: create_release
    #     uses: softprops/action-gh-release@v1
    #     with:
    #       files: |
    #         bin/*
    #       name: Release for ${{ matrix.os }}
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #   - name: Publish Release
    #     run: |
    #       echo "Release ID: ${{ steps.create_release.outputs.id }}"
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
