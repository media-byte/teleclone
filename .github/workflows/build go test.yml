name: Go Build and Test

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  workflow_dispatch:
    inputs:
      manual:
        description: Manual run (bypass default conditions)
        type: boolean
        required: true
        default: true

jobs:
  build:
    strategy:
      matrix:
        job_name: ['linux_amd64']

        include:
          - job_name: linux_amd64
            os: ubuntu-latest
            go: '1.21'
            goarch: amd64
            gotags: cmount
            build_flags: '-include "^linux/"'

          # - job_name: linux_arm64
          #   os: self-hosted
          #   go: '1.21'
          #   goarch: 'arm64'
          #   gotags: 'cmount'
          #   build_flags: '-include "^linux/"'

    runs-on: ${{ matrix.os }}

    steps:

      - name: Configure Git
        run: |
          git config --global user.email "hackmonker127001@protonmail.com"
          git config --global user.name "hackmonker"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: media-byte/teleclone
          ref: ${{ github.ref }}     

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'

      - name: Set environment variables
        shell: bash
        run: |
            echo "GOTAGS=${{ matrix.gotags }}" >> $GITHUB_ENV
            echo "BUILD_FLAGS=${{ matrix.build_flags }}" >> $GITHUB_ENV
            echo "BUILD_ARGS=${{ matrix.build_args }}" >> $GITHUB_ENV
            echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV
            echo "CGO_ENABLED=${{ matrix.cgo }}" >> $GITHUB_ENV

            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            export EXTENSION=".exe"
            else
            export EXTENSION=""
            fi

      - name: Install Libraries on Linux
        shell: bash
        run: |
            sudo modprobe fuse
            sudo chmod 666 /dev/fuse
            sudo chown root:$USER /etc/fuse.conf
            sudo apt-get -y install fuse3 libfuse-dev rpm pkg-config          

      - name: Run build
        run: go build .
  
      - name: Rclone version
        shell: bash
        run: |
            ./rclone version
            mkdir ./build
            if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then cp ./rclone${{ env.EXTENSION }} ./build/rclone_${{ matrix.goarch }}${{ env.EXTENSION }} ; fi
            if [[ "${{ matrix.os }}" == "self-hosted" ]]; then cp ./rclone${{ env.EXTENSION }} ./build/rclone_arm64${{ env.EXTENSION }} ; fi

      - name: Upload Artifacts - Linux
        uses: actions/upload-artifact@v2
        with:
          name: rclone-binaries-${{ matrix.os }}
          path: ./build

  create_tag_and_release:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Configure Git
        run: |
          git config --global user.email "hackmonker127001@protonmail.com"
          git config --global user.name "hackmonker"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: media-byte/teleclone
          ref: ${{ github.ref }}         

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: rclone-binaries-${{ matrix.os }}
          path: build

      - name: Create Tag
        id: create_tag
        run: |
          # See https://docs.github.com/en/get-started/using-git/dealing-with-special-characters-in-branch-and-tag-names
          TAG=v$(date -Iseconds | sed 's/[T:\+]/-/g')
          echo "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag -a $TAG -m "Published version $TAG" ${GITHUB_SHA}
          git push origin $TAG
        env:
            GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*
          name: Release for ${{ matrix.os }}
          tag_name: ${{ steps.tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Publish Release
        run: |
          echo "Release ID: ${{ steps.create_release.outputs.id }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}